//
//  EventMonitor.swift
//  
//
//  Created by Dhanushkumar Kanagaraj on 15/09/22.
//

import Alamofire
import Foundation

struct Constant {
    static let monitorNetworkArgument = "-MTMonitorRequest"
}

// MARK: - Request Event Monitor

/// Use this event monitor to listen to the requests data, response, metrics, etc
public class RequestEventMonitor: EventMonitor {
    public let queue = DispatchQueue(label: "com.mallow-tech.debug-event-monitor")
    
    // MARK: - Initialisers
    
    public init() { }
    
    // MARK: - Inherited Methods
    
    /// Listens to the request's starts or resumes event
    public func request(_ request: Request, didResumeTask task: URLSessionTask) {
        guard CommandLine.arguments.contains(Constant.monitorNetworkArgument) else { return }
        print("üìç Request Order: ", request.description)
    }
    
    /// Listens to the request's Data Metrics
    public func request(_ request: Request,
                 didGatherMetrics metrics: URLSessionTaskMetrics) {
        guard CommandLine.arguments.contains(Constant.monitorNetworkArgument) else { return }
        print("‚è± Request Duration: ", metrics.taskInterval)
    }
    
    public func requestDidCancel(_ request: Request) {
        guard CommandLine.arguments.contains(Constant.monitorNetworkArgument) else { return }
        print("üö´ Request Cancelled - \(request.description)")
    }
    
    /// Starts off when the request is completed
    public func request<Value>(_ request: DataRequest,
                        didParseResponse response: DataResponse<Value, AFError>) {
        guard CommandLine.arguments.contains(Constant.monitorNetworkArgument) else { return }
        print("‚ö°Ô∏è URL: \(request.description)")
        print("‚ö°Ô∏è Request Headers: \(request.request?.allHTTPHeaderFields?.debugDescription ?? "NIL")")
        if let data = request.request?.httpBody {
            if let body = try? JSONSerialization.jsonObject(with: data, options: .mutableContainers) {
                print("‚ö°Ô∏è Request Body: \(String(describing: body))")
            } else if let bodyParams = String(data: data, encoding: .utf8) {
                print("‚ö°Ô∏è Request Body: \(bodyParams)")
            }
        } else {
            print("‚ö°Ô∏è Request Body: NIL")
        }
        
        if let data = response.data {
            print("‚úÖ Response Headers: \(request.response?.allHeaderFields.debugDescription ?? "")")
            if let response = String(data: data, encoding: .utf8) {
                print("‚úÖ Success Response: \(response)")
            } else {
                print("‚úÖ‚ùå Data Found, but failed converting String")
            }
        }
        
        if let error = response.error {
            print("‚ùå Response Headers: \(request.response?.allHeaderFields.debugDescription ?? "")")
            print("‚ùå Status Code: \(String(describing: error.responseCode))")
            print("‚ùå Error: \(String(describing: error.errorDescription))")
        }
    }
}
